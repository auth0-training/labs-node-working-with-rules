{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Work with Rules",
  "steps": [
    {
      "file": "README.md",
      "line": 1,
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\n1. #### Create an explicit Allow User List\n2. #### Create an Allow User List for Admin Applications\n3. #### Enable Admin Only Access for Admin Applications"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Explicitly allow specific users",
      "description": "## Explicitly allow specific users\nAs an application developer, you have just joined a brand new team tasked with building an internal application for managing your customer accounts. As an experienced developer, you realize how much of a pain it is to build good access control on this type of application, so you have decided to give Auth0 a spin to see what it might be able to do to help you through this arduous task.  \n\nTo start off you are going to create an allow list of user emails that are allowed to log in.\n\n1. #### Navigate to the [Rules](https://manage.auth0.com/#/rules) section of the dashboard. This can be found under **Auth Pipeline** in the left-hand navigation menu.  \n    \n1. #### Click **Create** from the top right of the screen. Then click **Empty rule**.  \n      \n    \n1. #### Name the Rule **User Allow List**\n      \n    \n1. #### Select all and paste the following code sample into the text editor:  \n      \n    ```javascript\n    function userAllowList(user, context, callback) {\n      \n      // List of user emails allowed to access admin applications\n      const userAllowList = [ \n        'user1@example.com', \n        'user2@example.com',\n      ];\n     \n      // Determine if the passed email value is in the userAllowList\n      const isAllowListedUser = email => (userAllowList.includes(email));\n     \n      // If the user is not allow listed return and Unauthorized Error\n      if (!isAllowListedUser(user.email)) {\n        return callback(new UnauthorizedError(\n          `Access denied: ${user.email} not allowed to access this application`)\n        );\n      }\n     \n      // Otherwise continue without an error\n      callback(null, user, context);\n    }\n    ```\n      \n    \n1. #### Click the **Save And Try** button below the text editor. This will deploy the rule and open a dialog. Here you can edit both the user and context objects that are being passed to the rule.  \n      \n    \n1. #### Without editing either the user or context-click the **Try** button to run the rule. At the bottom of the dialog under **Output,** you should see an error: ERROR: Access denied: jdoe@foobar.com not allowed to access this application.  \n      \n    \n1. #### Scroll back to the top of the dialog box and update the email value of the **User** object to `user1@example.com` and run the rule again. This time the **Output** should not show an error and instead return the profile and the rule context.  \n\n     ![Explicity Allow Specific Users](./.auth0/lab/guides/images/ExplicitlyAllowSpecificUsers.gif)\n"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Limit Your List To A Specifc Application",
      "description": "## Limit your list to a specific application\nYour first test was a success, but unfortunately, now no one can login to any application except for the users in your allow list! This time you want to create a rule that only runs for specific admin applications and only allows your allow list of users to gain access.\n\n1. #### Navigate to the [Rules](https://manage.auth0.com/#/rules) section of the dashboard.  \n      \n    \n1. #### Click **Create** from the top right of the screen. Then click **Empty rule**.  \n      \n    \n1. #### Name the Rule **User Allow List for Admin Applications**  \n      \n    \n1. #### Select all and paste the following code sample into the text editor:  \n      \n    ```javascript\n    function userAllowlistForAdminApps(user, context, callback) {\n      // List of administrative applications \n      const adminApps = [\n        'User Management App',\n        'Account Management App'\n      ];\n      // Determine if the requesting application is in the adminApp list\n      const isAdminApp = appName => adminApps.includes(appName);\n      if (!isAdminApp(context.clientName)) {\n        console.log(`EXIT RULE: ${context.clientName} is not an admin app`);\n        callback(null, user, context);\n      }\n      // List of user emails allowed to access admin applications\n      const userAllowlist = [ \n        'user1@example.com', \n        'user2@example.com',\n      ];\n      // Determine if the passed email value is in the userAllowlist\n      const isAllowlistedUser = email => userAllowlist.includes(email);\n      // If the user is not allow-listed return and Unauthorized Error\n      if (!isAllowlistedUser(user.email)) {\n        return callback(new UnauthorizedError(\n          `Access denied: ${user.email} not allowed to access this application`)\n          );\n        }\n        // Otherwise continue without an error\n        callback(null, user, context);\n      }\n    ```\n      \n    \n1. #### Click the **Save And Try** button below the text editor.  \n    \n1. #### Without editing either the user or context-click the **Try** button to run the rule. At the bottom of the dialog under **Output,** you should see EXIT RULE: MyWebApp is not an admin app followed by the profile and the rule context.  \n      \n    \n1. #### Scroll back to the top of the dialog and update the clientName value inside the **Context** object to `Account Management App` and run the rule again. This time the **Output** should show the error: ERROR: Access denied: jdoe@foobar.com not allowed to access this application. \n    \n1. #### Scroll to the top of the dialog one more time and update the email value inside the **User** object to `user2@example.com` and run the rule again. This time the **Output** should not show an error nor the SKIP RULE message and instead return the profile and the rule context.  \n\n     ![Limit your list to a specific application](./.auth0/lab/guides/images/LimitListToSpecificApplication.gif)\n\n"
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Flag specific users for access to specific applications",
      "description": "## Flag specific users for access to specific applications\n\nYou can tell you are on the right track, but maintaining an Allow List of admin users seems like more maintenance than you care to bear. What if you could instead flag users that are administrators?\n\n1. #### Navigate to the [Rules](https://manage.auth0.com/#/rules) section of the dashboard.  \n      \n    \n1. #### Click **Create** from the top right of the screen. Then click **Empty rule**.  \n      \n    \n1. #### Name the Rule **Admin Only Access for Admin Applications**.  \n      \n    \n1. #### Select all and paste the following code sample into the text editor:  \n      \n    ```javascript\n    function userAllowListForAdminApps(user, context, callback) {\n      // List of administrative applications \n      const adminApps = [\n        'User Management App',\n        'Account Management App',\n        // This is the clientName value when testing a connection\n        'All Applications',\n      ];\n      \n      // Determine if the requesting application is in the adminApp list\n      const isAdminApp = appName => adminApps.includes(appName);\n    \n      if (!isAdminApp(context.clientName)) {\n        console.log(`EXIT RULE: ${context.clientName} is not an admin app`);\n        callback(null, user, context);\n      }\n    \n      // Determine if the passed email value is in the userAllowList\n      const isAdminUser = user.app_metadata && user.app_metadata.admin === true;\n    \n      // If the user is not allow listed return and Unauthorized Error\n      if (!isAdminUser) {\n        return callback(new UnauthorizedError(\n          `Access denied: ${user.email} not allowed to access an admin application`)\n        );\n      }\n    \n      // Otherwise continue without an error\n      callback(null, user, context);\n    }\n    ```\n    \n1. #### Click the **Save And Try** button below the text editor  \n    \n1. #### Update the clientName value inside the **Context** object to `Account Management App` and run the rule. The **Output** should show the error: ERROR: Access denied: jdoe@foobar.com not allowed to access an admin application.  \n      \n    \n1. #### Scroll back to the top of the dialog and add `\"app_metadata\": {\"admin\":true},` inside the **User** object and run the rule again. This time the **Output** should return the profile and the rule context.  \n      \n    \n1. #### Navigate back to the [Rules](https://manage.auth0.com/#/rules) section of the dashboard.  \n      \n    \n1. #### Toggle off all rules other than **Admin Only Access for Admin Applications**.  \n      \n    \n1. #### Navigate to the [Users](https://manage.auth0.com/#/users) section of the dashboard.  \n      \n    \n1. #### Find a user that you know the credentials to login on behalf of.  \n\n    Note the **Connection** value for this user. Then click on the user to enter the profile edit screen.  \n      \n    \n1. #### Add `\"admin\": true` to the user’s app\\_metadata and click **Save.**\n      \n    \n1. #### Navigate to the [Database Connections](https://manage.auth0.com/#/connections/database) section of the dashboard in a new tab.  \n      \n    \n1. #### Find the Connection for the user you chose in step 12 and click the **...** button and select **Try**.  \n      \n    \n1. #### Enter the user credentials and submit the login form. You should see a success message.    \n    \n1. #### Go back to the user record and update the app\\_metadata with `”admin”: false`. Test the connection again. This time you should see an error message.  \n      \n```\n    {\n      \"error\": \"unauthorized\",\n      \"error_description\": \"Access denied: <YOUR USER EMAIL> not allowed\n    to access an admin application\"\n    }\n```   \n   ![Flag specific users for access to specific applications](./.auth0/lab/guides/images/FlagSpecifcUsers.gif)  \n\n**Note:** This was a simple example of how you can use Rules to customize the authorization decisions that Auth0 will make. You now have an idea of how Rules work in Auth0 and the potential they create for extending the platform. We will regroup shortly to discuss what you have learned but in the meantime review the questions below to test what you have just learned.  \n      \n### **Important:** Before moving on to other labs, disable all of the rules you’ve created in the dashboard under **Auth Pipeline** > **Rules**."
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Recap",
      "description": "## Recap\nConsider the following:  \n\n*   Why might it be a bad idea to create an email allow list?\n*   Why did we place the check for the admin app above the user allow list logic?\n*   Why did we use app\\_metadata rather than user\\_metadata to place the admin flag on the user?\n*   How else might you be able to make this rule easier to maintain as you develop more administrative applications?\n*   Can you think of any other ways without using rules we could have restricted the users that have access to admin applications?"
    }
  ]
}
